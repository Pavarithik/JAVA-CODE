public class RPNManualStack {

    public int evalRPN(String[] tokens) {
        int[] stack = new int[tokens.length];
        int index = 0;

        for (String token : tokens) {
            if (isOperator(token)) {
                int b = stack[--index];
                int a = stack[--index];
                stack[index++] = applyOperator(a, b, token);
            } else {
                stack[index++] = Integer.parseInt(token);
            }
        }

        return stack[0];
    }

    private boolean isOperator(String token) {
        return token.equals("+") || token.equals("-") ||
               token.equals("*") || token.equals("/");
    }

    private int applyOperator(int a, int b, String operator) {
        switch (operator) {
            case "+": return a + b;
            case "-": return a - b;
            case "*": return a * b;
            case "/": return a / b; 
            default: throw new IllegalArgumentException("Invalid operator: " + operator);
        }
    }

    public static void main(String[] args) {
        RPNManualStack calculator = new RPNManualStack();

        String[] tokens1 = {"2", "1", "+", "3", "*"};
        System.out.println("Output: " + calculator.evalRPN(tokens1)); 

        String[] tokens2 = {"4", "13", "5", "/", "+"};
        System.out.println("Output: " + calculator.evalRPN(tokens2));

        String[] tokens3 = {"10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"};
        System.out.println("Output: " + calculator.evalRPN(tokens3)); 
    }
}
